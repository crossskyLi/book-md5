{"version":3,"sources":["fetch.js"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,EAAP,MAAe,IAAf;;AAEA;AACA,MAAM,QAAN,CAAe,OAAf,GAAyB,IAAzB;AACA,MAAM,QAAN,CAAe,OAAf,GAAyB,2BAAzB,C,CAAqD;;AAErD;;AAEA;AACA,MAAM,YAAN,CAAmB,OAAnB,CAA2B,GAA3B,CAA+B,UAAC,MAAD,EAAY;AACzC;AACA;AACA;AACA;AACA,MAAI,aAAa,SAAjB,EAA4B;AAC1B;AACA,UAAM,QAAN,CAAe,OAAf,CAAuB,OAAO,MAA9B,EAAsC,eAAtC,IAAyD,aAAa,SAAtE;AACD;AACD,SAAO,MAAP;AACD,CAVD,EAUG,UAAC,KAAD,EAAW;AACZ,UAAQ,GAAR,CAAY,OAAZ,EAAqB,KAArB;AACA,SAAO,SAAQ,MAAR,CAAe,KAAf,CAAP;AACD,CAbD;;AAeA;AACA,MAAM,YAAN,CAAmB,QAAnB,CAA4B,GAA5B,CAAgC,UAAC,GAAD,EAAS;AACvC,MAAI,IAAI,IAAJ,CAAS,OAAb,EAAsB;AACpB;AACA,YAAQ,GAAR,CAAY,IAAI,IAAJ,CAAS,MAArB;AACA,WAAO,SAAQ,MAAR,CAAe,GAAf,CAAP;AACD;AACD,SAAO,IAAI,IAAX;AACD,CAPD,EAOG,UAAC,KAAD,EAAW;AACZ;AACA,UAAQ,GAAR,CAAY,MAAZ,EAAmB,KAAnB;AACA;AACA,SAAO,SAAQ,MAAR,CAAe,KAAf,CAAP;AACD,CAZD;;AAcA,OAAO,SAAS,KAAT,CAAe,KAAf,EAAsB,GAAtB,EAA2B,MAA3B,EAAmC;AACxC,SAAO,aAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,SAAS,GAAb;AACA,QAAI,UAAU,KAAd,EAAqB;AACnB,eAAS,SAAS,GAAT,GAAe,GAAG,SAAH,CAAa,MAAb,CAAxB;AACA;AACD;AACD,UAAM,KAAN,EAAa,MAAb,EAAqB,MAArB,EACC,IADD,CACM,oBAAY;AAChB,cAAQ,SAAS,MAAjB;AACD,KAHD,EAGG,eAAO;AACR,aAAO,GAAP;AACD,KALD,EAMC,KAND,CAMO,UAAC,KAAD,EAAW;AAChB,aAAO,KAAP;AACD,KARD;AASD,GAfM,CAAP;AAgBD;;AAED,OAAO,SAAS,UAAT,CAAoB,UAApB,EAAgC;AACrC,QAAM,GAAN,CAAU,UAAV,EAAsB,IAAtB,CAA2B,MAAM,MAAN,CAAa,UAAU,IAAV,EAAgB,KAAhB,EAAuB,CAE9D,CAF0B,CAA3B;AAGD;;AAED,eAAe;AACb;;;AAGC,wBAJY,kCAIW,MAJX,EAImB;AAC9B,WAAO,MAAM,KAAN,EAAa,iCAAb,EAAgD,MAAhD,CAAP;AACD,GANY;;;AAQb;;;AAGC,oBAXY,8BAWO,MAXP,EAWe;AAC1B,WAAO,MAAM,KAAN,EAAa,6BAAb,EAA4C,MAA5C,CAAP;AACD,GAbY;;AAcb;;;AAGC,UAjBY,oBAiBH,MAjBG,EAiBK;AAChB,WAAO,MAAM,MAAN,EAAc,eAAd,EAA+B,MAA/B,CAAP;AACD,GAnBY;;AAoBb;;;AAGC,kBAAgB,wBAAU,UAAV,EAAsB;AACrC,WAAO,WAAW,UAAX,CAAP;AACD;AAzBY,CAAf","file":"fetch-compiled.js","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\n// axios 配置\naxios.defaults.timeout = 5000;\naxios.defaults.baseURL = 'http://116.62.8.201:3600/';//生产服\n\n// axios.defaults.baseURL = 'http://192.168.0.41:3600/';//测试服\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  // if(config.method  === 'post'){\n  //   config.data = qs.stringify(config.data);\n  // }\n  // console.log(config)\n  if (localStorage.AuthToken) {\n    //token验证\n    axios.defaults.headers[config.method]['Authorization'] = localStorage.AuthToken;\n  }\n  return config;\n}, (error) => {\n  console.log('error', error);\n  return Promise.reject(error);\n});\n\n//返回状态判断\naxios.interceptors.response.use((res) => {\n  if (res.data.errcode) {\n    //在这一层做请求回来的errcode不为0的异常处理\n    console.log(res.data.errmsg);\n    return Promise.reject(res);\n  }\n  return res.data;\n}, (error) => {\n  //在这一层做网络请求异常处理\n  console.log('网络异常',error);\n  // _.toast(\"网络异常\");\n  return Promise.reject(error);\n});\n\nexport function fetch(model, url, params) {\n  return new Promise((resolve, reject) => {\n    let reqUrl = url;\n    if (model === 'get') {\n      reqUrl = reqUrl + '?' + qs.stringify(params);\n      // console.log(reqUrl);\n    }\n    axios[model](reqUrl, params)\n    .then(response => {\n      resolve(response.retobj);\n    }, err => {\n      reject(err);\n    })\n    .catch((error) => {\n      reject(error)\n    })\n  })\n}\n\nexport function fetchMulti(requestArr) {\n  axios.all(requestArr).then(axios.spread(function (acct, perms) {\n\n  }))\n}\n\nexport default {\n  /**\n   * 学生阅读排名\n   */\n   getReadingWeeklyReport(params) {\n    return fetch('get', '/reading/getReadingWeeklyReport', params)\n  },\n\n  /**\n   * 学生阅读数据分析\n   */\n   getReadingAnalysis(params) {\n    return fetch('get', '/reading/getReadingAnalysis', params)\n  },\n  /**\n   * 测试post\n   */\n   testPost(params) {\n    return fetch('post', '/reading/demo', params)\n  },\n  /**\n   * 测试多个请求并发\n   */\n   testFetchMulti: function (requestArr) {\n    return fetchMulti(requestArr)\n  },\n}\n"]}